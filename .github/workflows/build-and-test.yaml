name: Build and test
env:
  image_tagged: laravel-realworld-example-app
  registry_root: ghcr.io/acdh-oeaw/
  default_port: 5000
  source_image: tmp-cnb-image
  APP_NAME: github-laravel-realworld-example-app
# This together with the branch name is also used as the namespace to deploy to
  APP_ROOT: "/"
  SERVICE_ID: "99999"
  PUBLIC_URL: https://laravel-todo-example.acdh-cluster.arz.oeaw.ac.at
on:
  push: {}
jobs:
  build_and_push_to_registry:
    runs-on: ubuntu-20.04
    outputs:
      DOCKER_TAG: ${{ env.registry_root }}${{ env.image_tagged }}/${{ github.ref_name }}:${{ github.sha }}
      APP_NAME: ${{ env.APP_NAME }}
      APP_ROOT: ${{ env.APP_ROOT }}
      SERVICE_ID: ${{ env.SERVICE_ID }}
      PUBLIC_URL: ${{ env.PUBLIC_URL }}      
    steps:
      - name: Checkout
        uses: actions/checkout@v2
# CNB are not multi-arch ready as of May 2022 so this is not needed
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build using heroku/buildpacks:20 CNB
        uses: dfreilich/pack-action@v2.0.0
        with:
          args: 'build ${{ env.source_image }} --builder heroku/buildpacks:20'
      - name: Add default port to image
        run: |
          cat >> Dockerfile <<EOF
          ARG source_image
          FROM ${source_image}
          ARG default_port
          ENV PORT=${default_port}
          EXPOSE ${default_port}
          EOF
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            default_port=${{ env.default_port }}
            source_image=${{ env.source_image }}
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.registry_root }}${{ env.image_tagged }}/${{ github.ref_name }}:${{ github.sha }}
            ${{ env.registry_root }}${{ env.image_tagged }}/${{ github.ref_name }}
# acdhch/${{ env.image_tagged }}
  test:
    runs-on: ubuntu-20.04
    env:
      BUILDPACK_URL: https://github.com/heroku/heroku-buildpack-php
      PGPASSWORD: testing-password
      POSTGRES_USER: user
      POSTGRES_DB: test
      DATABASE_URL: "postgres://user:testing-password@postgres:5432/test"
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
# this is an example of detection not working (only in herokuish)
# Warning: Multiple default buildpacks reported the ability to handle this app. The first buildpack in the list below will be used.
# nodejs, php
      - name: Set up tests herokuish and heroku buildpack
        run: |
          cat <<EOF > Dockerfile  
          FROM gliderlabs/herokuish
          COPY . /tmp/app
          ENV BUILDPACK_URL=${{ env.BUILDPACK_URL }}
          ENV USER=herokuishuser
          EOF
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.registry_root }}${{ env.image_tagged }}/${{ github.ref_name }}:${{ github.sha }}-test
      - name: Create test services network
        run: |
          docker network create --internal test-services 
      - name: Set up a test database container
        run: |
           # The following service is isolated from the internet
           docker run -d --name postgres --network test-services -p 5432:5432 -e POSTGRES_DB=$POSTGRES_DB -e POSTGRES_USER=$POSTGRES_USER -e POSTGRES_PASSWORD=$PGPASSWORD postgres:9.6.16
           cat > psql-test.sh <<EOF
           run=1
           psql -h 127.0.0.1 -U user -d test -c \\q 2>/dev/null
           while [ $? == 2 ]
           do sleep 1
              run=$(($run+1))
              if [ $run -gt 59 ]; then break; fi
              echo -n .
              psql -h 127.0.0.1 -U user -d test -c \\q 2>/dev/null
           done
           EOF
           bash psql-test.sh
# If in doubt use the following method       
#      - name: Run tests using herokuish and heroku buildpack
# This is a bit more elaborate so the container has access to the internet via the host
# and in addition to the test services network which is isolated from the internet
#        run: |
#          cid=$(docker create -t -e DATABASE_URL=$DATABASE_URL ${{ env.image_tagged }}:${{ github.ref_name }}-test /bin/herokuish buildpack test)
#          docker network connect test-services $cid
#          docker start -i $cid
# This is only for frameworks that really don't support DATABASE_URL. The next version of laravel for exmaple does.
      - name: Run tests using herokuish and heroku buildpack (DB credentials in multiple variables)
        run: |
          cid=$(docker create -t -e POSTGRES_DB=$POSTGRES_DB -e POSTGRES_USER=$POSTGRES_USER -e POSTGRES_PASSWORD=$PGPASSWORD -e POSTGRES_HOST=postgres ${{ env.registry_root }}${{ env.image_tagged }}/${{ github.ref_name }}:${{ github.sha }}-test /bin/herokuish buildpack test)
          docker network connect test-services $cid
          docker start -i $cid
  deploy:
    needs: [build_and_push_to_registry, test]
    uses: ./.github/workflows/deploy.yml
    secrets:
      ACDH_KUBE_CONFIG: ${{ secrets.ACDH_KUBE_CONFIG }}
    with:
      DOCKER_TAG: ${{ needs.build_and_push_to_registry.outputs.DOCKER_TAG }}
      APP_NAME: ${{ needs.build_and_push_to_registry.outputs.APP_NAME }}
      APP_ROOT: ${{ needs.build_and_push_to_registry.outputs.APP_ROOT }}
      SERVICE_ID: ${{ needs.build_and_push_to_registry.outputs.SERVICE_ID }}
      PUBLIC_URL: ${{ needs.build_and_push_to_registry.outputs.PUBLIC_URL }}
